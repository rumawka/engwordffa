import asyncio
import json
import logging
import os
import random
from datetime import datetime, time
from typing import Dict, List, Optional, Set
from dataclasses import dataclass, field

import aiohttp
import pytz
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import (
    Application, CallbackQueryHandler, CommandHandler, ContextTypes,
    MessageHandler, filters
)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
WORDS_FILE = 'words_cefr.json'
TRANSLATION_TIMEOUT = 10  # —Å–µ–∫—É–Ω–¥
MAX_WORDS_PER_REQUEST = 10

@dataclass
class UserData:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    level: Optional[str] = None
    learned_words: Set[str] = field(default_factory=set)
    daily_words: List[Dict] = field(default_factory=list)
    last_daily_update: Optional[datetime] = None

# –•—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –ø–∞–º—è—Ç–∏
user_data: Dict[int, UserData] = {}

class EnglishLearningBot:
    """–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –±–æ—Ç–∞ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ"""
    
    def __init__(self, words_file: str = WORDS_FILE):
        self.moscow_tz = pytz.timezone('Europe/Moscow')
        self.level_word_bank = self._load_word_bank(words_file)
        self.session: Optional[aiohttp.ClientSession] = None

    def _load_word_bank(self, words_file: str) -> Dict[str, List[str]]:
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Å–ª–æ–≤–∞—Ä—è –∏–∑ —Ñ–∞–π–ª–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
        try:
            with open(words_file, "r", encoding="utf-8") as f:
                return json.load(f)
        except FileNotFoundError:
            logger.error(f"–§–∞–π–ª {words_file} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return {}
        except json.JSONDecodeError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –≤ —Ñ–∞–π–ª–µ {words_file}: {e}")
            return {}
        except Exception as e:
            logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ {words_file}: {e}")
            return {}

    async def get_session(self) -> aiohttp.ClientSession:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ HTTP —Å–µ—Å—Å–∏–∏"""
        if self.session is None or self.session.closed:
            timeout = aiohttp.ClientTimeout(total=TRANSLATION_TIMEOUT)
            self.session = aiohttp.ClientSession(timeout=timeout)
        return self.session

    async def close_session(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ HTTP —Å–µ—Å—Å–∏–∏"""
        if self.session and not self.session.closed:
            await self.session.close()

    def get_user_data(self, user_id: int) -> UserData:
        """–ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if user_id not in user_data:
            user_data[user_id] = UserData()
        return user_data[user_id]

    async def fetch_words_by_level(self, level: str, count: int = 5) -> List[Dict]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª–æ–≤ –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ JSON-—Å–ª–æ–≤–∞—Ä—è —Å –ø–µ—Ä–µ–≤–æ–¥–æ–º
        
        Args:
            level: –£—Ä–æ–≤–µ–Ω—å CEFR (A1, A2, B1, B2, C1, C2)
            count: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è
            
        Returns:
            –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å–ª–æ–≤–∞—Ö
        """
        count = min(count, MAX_WORDS_PER_REQUEST)
        
        try:
            word_list = self.level_word_bank.get(level.upper(), [])
            if not word_list:
                logger.warning(f"–°–ª–æ–≤–∞ –¥–ª—è —É—Ä–æ–≤–Ω—è {level} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                return await self._get_fallback_words(level, count)

            # –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –∏ –≤—ã–±–∏—Ä–∞–µ–º –Ω—É–∂–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
            selected_words = random.sample(word_list, min(count, len(word_list)))

            words = []
            for word in selected_words:
                translation = await self.translate_text(word, 'ru')
                words.append({
                    'word': word,
                    'definition': "-",
                    'translation': translation
                })
            return words
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ª–æ–≤ –¥–ª—è —É—Ä–æ–≤–Ω—è {level}: {e}")
            return await self._get_fallback_words(level, count)

    async def translate_text(self, text: str, target_lang: str = 'ru') -> str:
        """
        –ü–µ—Ä–µ–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞ —á–µ—Ä–µ–∑ MyMemory Translation API
        
        Args:
            text: –¢–µ–∫—Å—Ç –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞
            target_lang: –¶–µ–ª–µ–≤–æ–π —è–∑—ã–∫ ('ru' –∏–ª–∏ 'en')
            
        Returns:
            –ü–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
        """
        if not text or not text.strip():
            return "–ü—É—Å—Ç–æ–π —Ç–µ–∫—Å—Ç"

        try:
            session = await self.get_session()
            url = "https://api.mymemory.translated.net/get"
            params = {
                'q': text.strip(),
                'langpair': f'en|{target_lang}' if target_lang == 'ru' else f'ru|en'
            }

            async with session.get(url, params=params) as response:
                if response.status == 200:
                    data = await response.json()
                    translated = data.get('responseData', {}).get('translatedText', '')
                    return translated if translated else f"–ü–µ—Ä–µ–≤–æ–¥ –¥–ª—è '{text}' –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
                else:
                    logger.warning(f"API –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å {response.status} –¥–ª—è —Ç–µ–∫—Å—Ç–∞ '{text}'")
                    
        except asyncio.TimeoutError:
            logger.error(f"–¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ —Ç–µ–∫—Å—Ç–∞ '{text}'")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ '{text}': {e}")

        return f"–ü–µ—Ä–µ–≤–æ–¥ –¥–ª—è '{text}' –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"

    async def _get_fallback_words(self, level: str, count: int) -> List[Dict]:
        """–†–µ–∑–µ—Ä–≤–Ω—ã–µ —Å–ª–æ–≤–∞ –µ—Å–ª–∏ –æ—Å–Ω–æ–≤–Ω–æ–π –∏—Å—Ç–æ—á–Ω–∏–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"""
        fallback_words_by_level = {
            'A1': [
                {'word': 'cat', 'definition': 'a small domesticated carnivorous mammal', 'translation': '–∫–æ—Ç'},
                {'word': 'dog', 'definition': 'a domesticated carnivorous mammal', 'translation': '—Å–æ–±–∞–∫–∞'},
                {'word': 'house', 'definition': 'a building for human habitation', 'translation': '–¥–æ–º'},
                {'word': 'car', 'definition': 'a road vehicle powered by a motor', 'translation': '–º–∞—à–∏–Ω–∞'},
                {'word': 'book', 'definition': 'a written or printed work consisting of pages', 'translation': '–∫–Ω–∏–≥–∞'},
                {'word': 'water', 'definition': 'a colorless, transparent, odorless liquid', 'translation': '–≤–æ–¥–∞'},
                {'word': 'food', 'definition': 'any nutritious substance that people eat', 'translation': '–µ–¥–∞'},
                {'word': 'table', 'definition': 'a piece of furniture with a flat top', 'translation': '—Å—Ç–æ–ª'},
                {'word': 'chair', 'definition': 'a separate seat for one person', 'translation': '—Å—Ç—É–ª'},
                {'word': 'window', 'definition': 'an opening in a wall fitted with glass', 'translation': '–æ–∫–Ω–æ'}
            ],
            'A2': [
                {'word': 'school', 'definition': 'an institution for learning', 'translation': '—à–∫–æ–ª–∞'},
                {'word': 'friend', 'definition': 'a person you like and know well', 'translation': '–¥—Ä—É–≥'},
                {'word': 'family', 'definition': 'a group of related people', 'translation': '—Å–µ–º—å—è'},
                {'word': 'work', 'definition': 'activity involving effort', 'translation': '—Ä–∞–±–æ—Ç–∞'},
                {'word': 'money', 'definition': 'medium of exchange', 'translation': '–¥–µ–Ω—å–≥–∏'}
            ]
        }

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–ª–æ–≤–∞ A1 –¥–ª—è –≤—Å–µ—Ö —É—Ä–æ–≤–Ω–µ–π, –µ—Å–ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –Ω–µ –Ω–∞–π–¥–µ–Ω
        base_words = fallback_words_by_level.get(level, fallback_words_by_level['A1'])
        return random.sample(base_words, min(count, len(base_words)))

    def format_words_text(self, words: List[Dict], level: str, title: str = "—Å–ª–æ–≤–∞") -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å–æ —Å–ª–æ–≤–∞–º–∏"""
        if not words:
            return f"üìö {title} ({level}): —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç\n\n"
            
        words_text = f"üìö –í–∞—à–∏ {title} ({level}):\n\n"
        for i, word_info in enumerate(words, 1):
            word = word_info.get('word', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
            translation = word_info.get('translation', '–Ω–µ—Ç –ø–µ—Ä–µ–≤–æ–¥–∞')
            words_text += f"{i}. **{word}** ‚Üí {translation}\n"
        return words_text

    def _detect_language(self, text: str) -> str:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —è–∑—ã–∫–∞ —Ç–µ–∫—Å—Ç–∞ (–ø—Ä–æ—Å—Ç–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –Ω–∞–ª–∏—á–∏—é –∫–∏—Ä–∏–ª–ª–∏—Ü—ã)"""
        return 'ru' if any(ord(char) > 127 for char in text) else 'en'

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = EnglishLearningBot()

def create_level_keyboard() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≤—ã–±–æ—Ä–∞ —É—Ä–æ–≤–Ω—è"""
    keyboard = [
        [InlineKeyboardButton("A1 (Beginner)", callback_data="level_A1")],
        [InlineKeyboardButton("A2 (Elementary)", callback_data="level_A2")],
        [InlineKeyboardButton("B1 (Intermediate)", callback_data="level_B1")],
        [InlineKeyboardButton("B2 (Upper-Intermediate)", callback_data="level_B2")],
        [InlineKeyboardButton("C1 (Advanced)", callback_data="level_C1")],
        [InlineKeyboardButton("C2 (Proficiency)", callback_data="level_C2")]
    ]
    return InlineKeyboardMarkup(keyboard)

def create_main_keyboard() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
    keyboard = [
        [InlineKeyboardButton("üîÑ –ü–æ–ª—É—á–∏—Ç—å –µ—â–µ —Å–ª–æ–≤–∞", callback_data="more_words")],
        [InlineKeyboardButton("üí¨ –ü–µ—Ä–µ–≤–µ—Å—Ç–∏ —Å–ª–æ–≤–æ", callback_data="translate_mode")],
        [InlineKeyboardButton("üìä –ò–∑–º–µ–Ω–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å", callback_data="change_level")]
    ]
    return InlineKeyboardMarkup(keyboard)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /start"""
    welcome_text = """üéì –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ English Learning Bot!

–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à —É—Ä–æ–≤–µ–Ω—å –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —è–∑—ã–∫–∞:

‚Ä¢ A1-A2: –ù–∞—á–∏–Ω–∞—é—â–∏–π
‚Ä¢ B1-B2: –°—Ä–µ–¥–Ω–∏–π  
‚Ä¢ C1-C2: –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π

–ë–æ—Ç –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –≤–∞–º —Å–ª–æ–≤–∞ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 10:00 –ø–æ –º–æ—Å–∫–æ–≤—Å–∫–æ–º—É –≤—Ä–µ–º–µ–Ω–∏!
–ö –∫–∞–∂–¥–æ–º—É —Å–ª–æ–≤—É –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è —Ä—É—Å—Å–∫–∏–π –ø–µ—Ä–µ–≤–æ–¥! üåü

üìö –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É
/translate - –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ —Å–ª–æ–≤–æ
/more - –ø–æ–ª—É—á–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–ª–æ–≤–∞
/level - –∏–∑–º–µ–Ω–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å
/stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–∑—É—á–µ–Ω–∏—è
/test_daily - —Ç–µ—Å—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏"""

    await update.message.reply_text(welcome_text, reply_markup=create_level_keyboard())

async def handle_level_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —É—Ä–æ–≤–Ω—è"""
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    level = query.data.replace("level_", "")
    
    user_info = bot.get_user_data(user_id)
    user_info.level = level
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
    await query.edit_message_text("‚è≥ –ó–∞–≥—Ä—É–∂–∞—é —Å–ª–æ–≤–∞ —Å –ø–µ—Ä–µ–≤–æ–¥–∞–º–∏...")
    
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–≤—ã–µ —Å–ª–æ–≤–∞
        words = await bot.fetch_words_by_level(level, 5)
        user_info.daily_words = words
        user_info.last_daily_update = datetime.now(bot.moscow_tz).date()
        
        words_text = f"‚úÖ –£—Ä–æ–≤–µ–Ω—å {level} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!\n\n"
        words_text += bot.format_words_text(words, level, "—Å–ª–æ–≤–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è")
        
        await query.edit_message_text(
            words_text, 
            parse_mode='Markdown', 
            reply_markup=create_main_keyboard()
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ —É—Ä–æ–≤–Ω—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        await query.edit_message_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            reply_markup=create_level_keyboard()
        )

async def handle_more_words(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–ª—É—á–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–ª–æ–≤–∞"""
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    user_info = bot.get_user_data(user_id)
    
    if not user_info.level:
        await query.edit_message_text("‚ùå –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å –∫–æ–º–∞–Ω–¥–æ–π /start")
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
    await query.edit_message_text("‚è≥ –ó–∞–≥—Ä—É–∂–∞—é –Ω–æ–≤—ã–µ —Å–ª–æ–≤–∞ —Å –ø–µ—Ä–µ–≤–æ–¥–∞–º–∏...")
    
    try:
        # –û—Ç–º–µ—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Å–ª–æ–≤–∞ –∫–∞–∫ –∏–∑—É—á–µ–Ω–Ω—ã–µ
        for word_info in user_info.daily_words:
            if 'word' in word_info:
                user_info.learned_words.add(word_info['word'])
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–æ–≤—ã–µ —Å–ª–æ–≤–∞
        new_words = await bot.fetch_words_by_level(user_info.level, 5)
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º —É–∂–µ –∏–∑—É—á–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞
        filtered_words = [w for w in new_words if w.get('word') not in user_info.learned_words]
        
        if not filtered_words:
            # –ï—Å–ª–∏ –≤—Å–µ —Å–ª–æ–≤–∞ —É–∂–µ –∏–∑—É—á–µ–Ω—ã, –±–µ—Ä–µ–º –ª—é–±—ã–µ
            filtered_words = new_words
        
        user_info.daily_words = filtered_words
        
        words_text = "üÜï " + bot.format_words_text(
            filtered_words, user_info.level, "–Ω–æ–≤—ã–µ —Å–ª–æ–≤–∞"
        )
        words_text += f"\nüìà –ò–∑—É—á–µ–Ω–æ —Å–ª–æ–≤: {len(user_info.learned_words)}"
        
        await query.edit_message_text(
            words_text, 
            parse_mode='Markdown', 
            reply_markup=create_main_keyboard()
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–æ–≤—ã—Ö —Å–ª–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–æ–≤—ã—Ö —Å–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def handle_translate_mode(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–†–µ–∂–∏–º –ø–µ—Ä–µ–≤–æ–¥–∞"""
    query = update.callback_query
    await query.answer()
    
    keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ —Å–ª–æ–≤–∞–º", callback_data="back_to_words")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        "üí¨ –†–µ–∂–∏–º –ø–µ—Ä–µ–≤–æ–¥–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!\n\n"
        "–ù–∞–ø–∏—à–∏—Ç–µ —Å–ª–æ–≤–æ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º –∏–ª–∏ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ, –∏ —è –ø–µ—Ä–µ–≤–µ–¥—É –µ–≥–æ.\n\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: cat –∏–ª–∏ –∫–æ—Ç",
        reply_markup=reply_markup
    )

async def handle_back_to_words(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ª–æ–≤–∞–º"""
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    user_info = bot.get_user_data(user_id)
    
    if not user_info.daily_words:
        await query.edit_message_text("‚ùå –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å –∫–æ–º–∞–Ω–¥–æ–π /start")
        return
    
    words_text = bot.format_words_text(user_info.daily_words, user_info.level, "—Ç–µ–∫—É—â–∏–µ —Å–ª–æ–≤–∞")
    
    await query.edit_message_text(
        words_text, 
        parse_mode='Markdown', 
        reply_markup=create_main_keyboard()
    )

async def handle_change_level(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ò–∑–º–µ–Ω–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å"""
    query = update.callback_query
    await query.answer()
    
    await query.edit_message_text(
        "üìä –í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —è–∑—ã–∫–∞:",
        reply_markup=create_level_keyboard()
    )

async def handle_text_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞)"""
    if not update.message or not update.message.text:
        return
        
    text = update.message.text.strip()
    if not text:
        await update.message.reply_text("‚ùå –ü—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
        return
    
    try:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —è–∑—ã–∫ –∏ –ø–µ—Ä–µ–≤–æ–¥–∏–º
        source_lang = bot._detect_language(text)
        target_lang = 'en' if source_lang == 'ru' else 'ru'
        
        translation = await bot.translate_text(text, target_lang)
        
        await update.message.reply_text(
            f"üîÑ **{text}** ‚Üí {translation}", 
            parse_mode='Markdown'
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ —Ç–µ–∫—Å—Ç–∞ '{text}': {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def translate_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /translate"""
    await update.message.reply_text(
        "üí¨ –ù–∞–ø–∏—à–∏—Ç–µ —Å–ª–æ–≤–æ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º –∏–ª–∏ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞.\n\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: cat –∏–ª–∏ –∫–æ—Ç"
    )

async def more_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /more"""
    user_id = update.message.from_user.id
    user_info = bot.get_user_data(user_id)
    
    if not user_info.level:
        await update.message.reply_text("‚ùå –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å –∫–æ–º–∞–Ω–¥–æ–π /start")
        return
    
    try:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
        loading_msg = await update.message.reply_text("‚è≥ –ó–∞–≥—Ä—É–∂–∞—é –Ω–æ–≤—ã–µ —Å–ª–æ–≤–∞ —Å –ø–µ—Ä–µ–≤–æ–¥–∞–º–∏...")
        
        # –û—Ç–º–µ—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Å–ª–æ–≤–∞ –∫–∞–∫ –∏–∑—É—á–µ–Ω–Ω—ã–µ
        for word_info in user_info.daily_words:
            if 'word' in word_info:
                user_info.learned_words.add(word_info['word'])
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–æ–≤—ã–µ —Å–ª–æ–≤–∞
        new_words = await bot.fetch_words_by_level(user_info.level, 5)
        user_info.daily_words = new_words
        
        words_text = "üÜï " + bot.format_words_text(
            new_words, user_info.level, "–Ω–æ–≤—ã–µ —Å–ª–æ–≤–∞"
        )
        words_text += f"\nüìà –ò–∑—É—á–µ–Ω–æ —Å–ª–æ–≤: {len(user_info.learned_words)}"
        
        await loading_msg.edit_text(words_text, parse_mode='Markdown')
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /more –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def level_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /level"""
    await update.message.reply_text(
        "üìä –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à —É—Ä–æ–≤–µ–Ω—å –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —è–∑—ã–∫–∞:",
        reply_markup=create_level_keyboard()
    )

async def stats_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /stats - –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
    user_id = update.message.from_user.id
    user_info = bot.get_user_data(user_id)
    
    if not user_info.level:
        await update.message.reply_text("‚ùå –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å –∫–æ–º–∞–Ω–¥–æ–π /start")
        return
    
    stats_text = f"""üìä **–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**

üéØ –¢–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å: {user_info.level}
üìö –ò–∑—É—á–µ–Ω–æ —Å–ª–æ–≤: {len(user_info.learned_words)}
üìÖ –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {user_info.last_daily_update or '–Ω–∏–∫–æ–≥–¥–∞'}
üî§ –°–ª–æ–≤ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è: {len(user_info.daily_words)}
"""
    
    await update.message.reply_text(stats_text, parse_mode='Markdown')

async def test_daily_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /test_daily –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö —Å–ª–æ–≤"""
    user_id = update.message.from_user.id
    user_info = bot.get_user_data(user_id)
    
    if not user_info.level:
        await update.message.reply_text("‚ùå –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å –∫–æ–º–∞–Ω–¥–æ–π /start")
        return
    
    try:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
        loading_msg = await update.message.reply_text("‚è≥ –¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏: –ø–æ–ª—É—á–∞—é —Å–ª–æ–≤–∞ —Å –ø–µ—Ä–µ–≤–æ–¥–∞–º–∏...")
        
        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≥—Ä—É–∂–∞–µ–º –Ω–æ–≤—ã–µ —Å–ª–æ–≤–∞
        new_words = await bot.fetch_words_by_level(user_info.level, 5)
        user_info.daily_words = new_words
        user_info.last_daily_update = datetime.now(bot.moscow_tz).date()
        
        words_text = "üß™ –¢–ï–°–¢: " + bot.format_words_text(
            new_words, user_info.level, "–≤–∞—à–∏ —Å–ª–æ–≤–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è"
        )
        words_text += "\n–≠—Ç–æ —Ç–µ—Å—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏! üìö"
        
        await loading_msg.edit_text(words_text, parse_mode='Markdown')
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–æ–≤–æ–π –∫–æ–º–∞–Ω–¥–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def daily_words_job(context: ContextTypes.DEFAULT_TYPE):
    """–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–ª–æ–≤ –≤ 10:00 –ø–æ –ú–æ—Å–∫–≤–µ"""
    try:
        today = datetime.now(bot.moscow_tz).date()
        
        for user_id, user_info in user_data.items():
            try:
                if not user_info.level:
                    continue
                    
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å —Å–ª–æ–≤–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
                if user_info.last_daily_update != today:
                    # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–æ–≤—ã–µ —Å–ª–æ–≤–∞
                    new_words = await bot.fetch_words_by_level(user_info.level, 5)
                    user_info.daily_words = new_words
                    user_info.last_daily_update = today
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                words_text = "üåÖ –î–æ–±—Ä–æ–µ —É—Ç—Ä–æ! " + bot.format_words_text(
                    user_info.daily_words, user_info.level, "–≤–∞—à–∏ —Å–ª–æ–≤–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è"
                )
                words_text += "\n–£–¥–∞—á–Ω–æ–≥–æ –∏–∑—É—á–µ–Ω–∏—è! üìö"
                
                await context.bot.send_message(
                    chat_id=user_id,
                    text=words_text,
                    parse_mode='Markdown'
                )
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
                
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –∑–∞–¥–∞—á–µ: {e}")

async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –æ—à–∏–±–æ–∫"""
    logger.error(f"–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {context.error}")
    
    if update and update.effective_message:
        try:
            await update.effective_message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ: {e}")

def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    if not TOKEN:
        logger.error("TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
        return
    
    try:
        # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        application = Application.builder().token(TOKEN).build()
        
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥
        application.add_handler(CommandHandler("start", start))
        application.add_handler(CommandHandler("translate", translate_command))
        application.add_handler(CommandHandler("more", more_command))
        application.add_handler(CommandHandler("level", level_command))
        application.add_handler(CommandHandler("stats", stats_command))
        application.add_handler(CommandHandler("test_daily", test_daily_command))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback-–∫–Ω–æ–ø–æ–∫
        application.add_handler(CallbackQueryHandler(handle_level_selection, pattern="^level_"))
        application.add_handler(CallbackQueryHandler(handle_more_words, pattern="^more_words$"))
        application.add_handler(CallbackQueryHandler(handle_translate_mode, pattern="^translate_mode$"))
        application.add_handler(CallbackQueryHandler(handle_back_to_words, pattern="^back_to_words$"))
        application.add_handler(CallbackQueryHandler(handle_change_level, pattern="^change_level$"))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text_message))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
        application.add_error_handler(error_handler)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –∑–∞–¥–∞—á–∏ (10:00 –ø–æ –ú–æ—Å–∫–≤–µ = 07:00 UTC)
        try:
            job_queue = application.job_queue
            if job_queue:
                job_queue.run_daily(
                    daily_words_job,
                    time=time(hour=7, minute=0),  # 10:00 –ú–°–ö = 07:00 UTC
                    days=(0, 1, 2, 3, 4, 5, 6)   # –ö–∞–∂–¥—ã–π –¥–µ–Ω—å
                )
                logger.info("–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –∑–∞–¥–∞—á–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –Ω–∞ 10:00 –ú–°–ö")
            else:
                logger.warning("JobQueue –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ - –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ JobQueue: {e}")
            logger.info("–ë–æ—Ç –ø—Ä–æ–¥–æ–ª–∂–∏—Ç —Ä–∞–±–æ—Ç—É –±–µ–∑ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
        
        # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
        logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
        application.run_polling(drop_pending_updates=True)
        
    except KeyboardInterrupt:
        logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ: {e}")
        raise
    finally:
        # –ó–∞–∫—Ä—ã—Ç–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤
        asyncio.run(bot.close_session())

if __name__ == '__main__':
    main()
