import os
import asyncio
import logging
import json
import aiohttp
import random
from datetime import datetime, time
from typing import Dict, List, Optional
import pytz

from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.getenv('7814440652:AAFjykovjRaHZjobm7bL7xEeXfARucfJBQ0')
if not BOT_TOKEN:
    raise ValueError("BOT_TOKEN environment variable is not set")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM
class UserState(StatesGroup):
    choosing_level = State()

# –£—Ä–æ–≤–Ω–∏ –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —è–∑—ã–∫–∞
LEVELS = {
    'a1': 'A1 - Beginner',
    'a2': 'A2 - Elementary', 
    'b1': 'B1 - Intermediate',
    'b2': 'B2 - Upper-Intermediate',
    'c1': 'C1 - Advanced',
    'c2': 'C2 - Proficiency'
}

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö)
users_data: Dict[int, Dict] = {}

class WordService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ª–æ–≤ —á–µ—Ä–µ–∑ API"""
    
    def __init__(self):
        self.session = None
    
    async def get_session(self):
        if self.session is None or self.session.closed:
            self.session = aiohttp.ClientSession()
        return self.session
    
    async def close_session(self):
        if self.session and not self.session.closed:
            await self.session.close()
    
    async def get_random_words(self, level: str, count: int = 5) -> List[Dict[str, str]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª—É—á–∞–π–Ω—ã—Ö —Å–ª–æ–≤ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è"""
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º WordsAPI –∏–ª–∏ –ø–æ—Ö–æ–∂–∏–µ —Å–µ—Ä–≤–∏—Å—ã
            # –ó–¥–µ—Å—å –ø—Ä–∏–º–µ—Ä —Å mock –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —É—Ä–æ–≤–Ω–µ–π
            words_by_level = {
                'a1': [
                    {'word': 'cat', 'translation': '–∫–æ—Ç, –∫–æ—à–∫–∞', 'definition': 'A small domesticated carnivorous mammal'},
                    {'word': 'dog', 'translation': '—Å–æ–±–∞–∫–∞', 'definition': 'A domesticated carnivorous mammal'},
                    {'word': 'house', 'translation': '–¥–æ–º', 'definition': 'A building for human habitation'},
                    {'word': 'water', 'translation': '–≤–æ–¥–∞', 'definition': 'A colorless, transparent liquid'},
                    {'word': 'food', 'translation': '–µ–¥–∞', 'definition': 'Any nutritious substance that people eat'},
                    {'word': 'book', 'translation': '–∫–Ω–∏–≥–∞', 'definition': 'A written or printed work'},
                    {'word': 'car', 'translation': '–º–∞—à–∏–Ω–∞', 'definition': 'A road vehicle with four wheels'},
                    {'word': 'tree', 'translation': '–¥–µ—Ä–µ–≤–æ', 'definition': 'A woody perennial plant'},
                ],
                'a2': [
                    {'word': 'beautiful', 'translation': '–∫—Ä–∞—Å–∏–≤—ã–π', 'definition': 'Pleasing the senses or mind aesthetically'},
                    {'word': 'important', 'translation': '–≤–∞–∂–Ω—ã–π', 'definition': 'Of great significance or value'},
                    {'word': 'different', 'translation': '—Ä–∞–∑–Ω—ã–π', 'definition': 'Not the same as another'},
                    {'word': 'difficult', 'translation': '—Ç—Ä—É–¥–Ω—ã–π', 'definition': 'Needing much effort to accomplish'},
                    {'word': 'comfortable', 'translation': '—É–¥–æ–±–Ω—ã–π', 'definition': 'Providing physical ease and relaxation'},
                    {'word': 'interesting', 'translation': '–∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π', 'definition': 'Arousing curiosity or interest'},
                ],
                'b1': [
                    {'word': 'accomplish', 'translation': '–¥–æ—Å—Ç–∏–≥–∞—Ç—å', 'definition': 'To achieve or complete successfully'},
                    {'word': 'approximately', 'translation': '–ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ', 'definition': 'Close to the actual, but not completely accurate'},
                    {'word': 'benefit', 'translation': '–≤—ã–≥–æ–¥–∞', 'definition': 'An advantage or profit gained from something'},
                    {'word': 'challenge', 'translation': '–≤—ã–∑–æ–≤', 'definition': 'A call to take part in a contest or competition'},
                    {'word': 'circumstances', 'translation': '–æ–±—Å—Ç–æ—è—Ç–µ–ª—å—Å—Ç–≤–∞', 'definition': 'A fact or condition connected with an event'},
                    {'word': 'convenient', 'translation': '—É–¥–æ–±–Ω—ã–π', 'definition': 'Fitting in well with needs or activities'},
                ],
                'b2': [
                    {'word': 'accumulate', 'translation': '–Ω–∞–∫–∞–ø–ª–∏–≤–∞—Ç—å', 'definition': 'To gather together or acquire an increasing number'},
                    {'word': 'adequate', 'translation': '–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π', 'definition': 'Satisfactory or acceptable in quality or quantity'},
                    {'word': 'ambassador', 'translation': '–ø–æ—Å–æ–ª', 'definition': 'An accredited diplomat sent by a country'},
                    {'word': 'assumption', 'translation': '–ø—Ä–µ–¥–ø–æ–ª–æ–∂–µ–Ω–∏–µ', 'definition': 'A thing that is accepted as true without proof'},
                    {'word': 'controversy', 'translation': '–ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏–µ', 'definition': 'Prolonged public disagreement or heated discussion'},
                    {'word': 'deteriorate', 'translation': '—É—Ö—É–¥—à–∞—Ç—å—Å—è', 'definition': 'To become progressively worse'},
                ],
                'c1': [
                    {'word': 'abstraction', 'translation': '–∞–±—Å—Ç—Ä–∞–∫—Ü–∏—è', 'definition': 'The quality of dealing with ideas rather than events'},
                    {'word': 'ambiguous', 'translation': '–¥–≤—É—Å–º—ã—Å–ª–µ–Ω–Ω—ã–π', 'definition': 'Open to more than one interpretation'},
                    {'word': 'articulate', 'translation': '—á–µ—Ç–∫–æ –≤—ã—Ä–∞–∂–∞—Ç—å', 'definition': 'To express thoughts clearly and effectively'},
                    {'word': 'coherent', 'translation': '—Å–≤—è–∑–Ω—ã–π', 'definition': 'Logical and consistent'},
                    {'word': 'comprehensive', 'translation': '–≤—Å–µ–æ–±—ä–µ–º–ª—é—â–∏–π', 'definition': 'Complete and including everything'},
                    {'word': 'contemplate', 'translation': '—Ä–∞–∑–º—ã—à–ª—è—Ç—å', 'definition': 'To think about something deeply'},
                ],
                'c2': [
                    {'word': 'epitome', 'translation': '–≤–æ–ø–ª–æ—â–µ–Ω–∏–µ', 'definition': 'A perfect example of a particular quality'},
                    {'word': 'facade', 'translation': '—Ñ–∞—Å–∞–¥', 'definition': 'An outward appearance maintained to conceal reality'},
                    {'word': 'inherent', 'translation': '–ø—Ä–∏—Å—É—â–∏–π', 'definition': 'Existing as a natural basic part of something'},
                    {'word': 'juxtapose', 'translation': '—Å–æ–ø–æ—Å—Ç–∞–≤–ª—è—Ç—å', 'definition': 'To place close together for contrasting effect'},
                    {'word': 'nuance', 'translation': '–Ω—é–∞–Ω—Å', 'definition': 'A subtle difference in expression or meaning'},
                    {'word': 'paradigm', 'translation': '–ø–∞—Ä–∞–¥–∏–≥–º–∞', 'definition': 'A typical example or pattern of something'},
                ]
            }
            
            level_words = words_by_level.get(level, words_by_level['a1'])
            selected_words = random.sample(level_words, min(count, len(level_words)))
            return selected_words
            
        except Exception as e:
            logger.error(f"Error getting words: {e}")
            # Fallback —Å–ª–æ–≤–∞
            return [
                {'word': 'hello', 'translation': '–ø—Ä–∏–≤–µ—Ç', 'definition': 'Used as a greeting'},
                {'word': 'world', 'translation': '–º–∏—Ä', 'definition': 'The earth and all its inhabitants'},
            ]

word_service = WordService()

def get_level_keyboard():
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≤—ã–±–æ—Ä–∞ —É—Ä–æ–≤–Ω—è"""
    keyboard = []
    for level_code, level_name in LEVELS.items():
        keyboard.append([InlineKeyboardButton(text=level_name, callback_data=f"level_{level_code}")])
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

def get_main_keyboard():
    """–°–æ–∑–¥–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã"""
    keyboard = [
        [InlineKeyboardButton(text="üìö –ü–æ–ª—É—á–∏—Ç—å —Å–ª–æ–≤–∞ —Å–µ–π—á–∞—Å", callback_data="get_words_now")],
        [InlineKeyboardButton(text="‚öôÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å", callback_data="change_level")],
        [InlineKeyboardButton(text="‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", callback_data="info")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

@dp.message(Command("start"))
async def start_command(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user_id = message.from_user.id
    
    if user_id not in users_data:
        users_data[user_id] = {'level': None, 'last_words_date': None}
    
    welcome_text = (
        "üéì –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —è–∑—ã–∫–∞!\n\n"
        "üìÖ –ö–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 10:00 –ø–æ –º–æ—Å–∫–æ–≤—Å–∫–æ–º—É –≤—Ä–µ–º–µ–Ω–∏ —è –±—É–¥—É –ø—Ä–∏—Å—ã–ª–∞—Ç—å –≤–∞–º –Ω–æ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è.\n\n"
        "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à —É—Ä–æ–≤–µ–Ω—å –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —è–∑—ã–∫–∞:"
    )
    
    await message.answer(welcome_text, reply_markup=get_level_keyboard())
    await state.set_state(UserState.choosing_level)

@dp.callback_query(F.data.startswith("level_"))
async def set_level(callback_query: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —É—Ä–æ–≤–Ω—è"""
    level = callback_query.data.replace("level_", "")
    user_id = callback_query.from_user.id
    
    users_data[user_id]['level'] = level
    level_name = LEVELS[level]
    
    await callback_query.message.edit_text(
        f"‚úÖ –û—Ç–ª–∏—á–Ω–æ! –í–∞—à —É—Ä–æ–≤–µ–Ω—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {level_name}\n\n"
        f"–¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —Å–ª–æ–≤–∞ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 10:00 –ø–æ –º–æ—Å–∫–æ–≤—Å–∫–æ–º—É –≤—Ä–µ–º–µ–Ω–∏.\n\n"
        f"–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?",
        reply_markup=get_main_keyboard()
    )
    
    await state.clear()
    await callback_query.answer()

@dp.callback_query(F.data == "change_level")
async def change_level(callback_query: types.CallbackQuery, state: FSMContext):
    """–ò–∑–º–µ–Ω–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è"""
    await callback_query.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —è–∑—ã–∫–∞:",
        reply_markup=get_level_keyboard()
    )
    await state.set_state(UserState.choosing_level)
    await callback_query.answer()

@dp.callback_query(F.data == "get_words_now")
async def get_words_now(callback_query: types.CallbackQuery):
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ª–æ–≤–∞ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å"""
    user_id = callback_query.from_user.id
    
    if user_id not in users_data or not users_data[user_id]['level']:
        await callback_query.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å!", show_alert=True)
        return
    
    level = users_data[user_id]['level']
    words = await word_service.get_random_words(level, 5)
    
    words_text = format_words_message(words, level)
    
    await callback_query.message.edit_text(
        words_text,
        reply_markup=get_main_keyboard(),
        parse_mode='HTML'
    )
    await callback_query.answer()

@dp.callback_query(F.data == "info")
async def show_info(callback_query: types.CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é"""
    user_id = callback_query.from_user.id
    user_level = users_data.get(user_id, {}).get('level', '–Ω–µ –≤—ã–±—Ä–∞–Ω')
    level_name = LEVELS.get(user_level, '–Ω–µ –≤—ã–±—Ä–∞–Ω')
    
    info_text = (
        f"‚ÑπÔ∏è <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ</b>\n\n"
        f"üë§ <b>–í–∞—à —É—Ä–æ–≤–µ–Ω—å:</b> {level_name}\n"
        f"‚è∞ <b>–í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏:</b> 10:00 –ø–æ –º–æ—Å–∫–æ–≤—Å–∫–æ–º—É –≤—Ä–µ–º–µ–Ω–∏\n"
        f"üìö <b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤ –≤ –¥–µ–Ω—å:</b> 5\n\n"
        f"<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
        f"/start - –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞\n"
        f"/help - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É\n\n"
        f"<b>–£—Ä–æ–≤–Ω–∏ –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ:</b>\n"
        f"A1 - –ù–∞—á–∞–ª—å–Ω—ã–π\n"
        f"A2 - –≠–ª–µ–º–µ–Ω—Ç–∞—Ä–Ω—ã–π\n"
        f"B1 - –°—Ä–µ–¥–Ω–∏–π\n"
        f"B2 - –í—ã—à–µ —Å—Ä–µ–¥–Ω–µ–≥–æ\n"
        f"C1 - –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π\n"
        f"C2 - –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π"
    )
    
    await callback_query.message.edit_text(
        info_text,
        reply_markup=get_main_keyboard(),
        parse_mode='HTML'
    )
    await callback_query.answer()

@dp.message(Command("help"))
async def help_command(message: types.Message):
    """–ö–æ–º–∞–Ω–¥–∞ –ø–æ–º–æ—â–∏"""
    help_text = (
        "üÜò <b>–°–ø—Ä–∞–≤–∫–∞</b>\n\n"
        "–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –∏–∑—É—á–∞—Ç—å –∞–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å!\n\n"
        "<b>–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:</b>\n"
        "‚Ä¢ –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–æ–≤—ã—Ö —Å–ª–æ–≤ –≤ 10:00 –ú–°–ö\n"
        "‚Ä¢ –í—ã–±–æ—Ä —É—Ä–æ–≤–Ω—è –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ (A1-C2)\n"
        "‚Ä¢ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª–æ–≤ –ø–æ –∑–∞–ø—Ä–æ—Å—É\n\n"
        "<b>–ö–æ–º–∞–Ω–¥—ã:</b>\n"
        "/start - –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n\n"
        "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –±–æ—Ç–æ–º!"
    )
    
    await message.answer(help_text, reply_markup=get_main_keyboard(), parse_mode='HTML')

def format_words_message(words: List[Dict[str, str]], level: str) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å–æ —Å–ª–æ–≤–∞–º–∏"""
    level_name = LEVELS.get(level, level.upper())
    today = datetime.now().strftime("%d.%m.%Y")
    
    message = f"üìö <b>–°–ª–æ–≤–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è ({today})</b>\n"
    message += f"üéØ <b>–£—Ä–æ–≤–µ–Ω—å:</b> {level_name}\n\n"
    
    for i, word_data in enumerate(words, 1):
        word = word_data['word']
        translation = word_data['translation']
        definition = word_data.get('definition', '')
        
        message += f"<b>{i}. {word.capitalize()}</b>\n"
        message += f"üá∑üá∫ {translation}\n"
        if definition:
            message += f"üìñ <i>{definition}</i>\n"
        message += "\n"
    
    message += "üí° <b>–°–æ–≤–µ—Ç:</b> –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–æ—Å—Ç–∞–≤–∏—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Å —ç—Ç–∏–º–∏ —Å–ª–æ–≤–∞–º–∏!"
    
    return message

async def send_daily_words():
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö —Å–ª–æ–≤ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"""
    logger.info("Starting daily words distribution...")
    
    for user_id, user_data in users_data.items():
        if user_data.get('level'):
            try:
                level = user_data['level']
                words = await word_service.get_random_words(level, 5)
                words_text = format_words_message(words, level)
                
                await bot.send_message(
                    user_id,
                    words_text,
                    reply_markup=get_main_keyboard(),
                    parse_mode='HTML'
                )
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞—Ç—É –ø–æ—Å–ª–µ–¥–Ω–µ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
                users_data[user_id]['last_words_date'] = datetime.now().date().isoformat()
                
                logger.info(f"Words sent to user {user_id}")
                
            except Exception as e:
                logger.error(f"Error sending words to user {user_id}: {e}")
    
    logger.info("Daily words distribution completed")

async def schedule_daily_task():
    """–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –∑–∞–¥–∞—á"""
    moscow_tz = pytz.timezone('Europe/Moscow')
    target_time = time(10, 0)  # 10:00
    
    while True:
        try:
            now = datetime.now(moscow_tz)
            target_datetime = moscow_tz.localize(
                datetime.combine(now.date(), target_time)
            )
            
            # –ï—Å–ª–∏ –≤—Ä–µ–º—è —É–∂–µ –ø—Ä–æ—à–ª–æ, –ø–ª–∞–Ω–∏—Ä—É–µ–º –Ω–∞ –∑–∞–≤—Ç—Ä–∞
            if now >= target_datetime:
                target_datetime = target_datetime.replace(day=target_datetime.day + 1)
            
            # –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è –¥–æ –æ—Ç–ø—Ä–∞–≤–∫–∏
            time_until_send = (target_datetime - now).total_seconds()
            
            logger.info(f"Next daily words scheduled in {time_until_send/3600:.2f} hours")
            
            await asyncio.sleep(time_until_send)
            await send_daily_words()
            
        except Exception as e:
            logger.error(f"Error in scheduler: {e}")
            await asyncio.sleep(3600)  # –ü–æ–≤—Ç–æ—Ä—è–µ–º —á–µ—Ä–µ–∑ —á–∞—Å –ø—Ä–∏ –æ—à–∏–±–∫–µ

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π –∑–∞–¥–∞—á–µ
        scheduler_task = asyncio.create_task(schedule_daily_task())
        
        logger.info("Bot is starting...")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        await dp.start_polling(bot)
        
    except Exception as e:
        logger.error(f"Error in main: {e}")
    finally:
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é HTTP
        await word_service.close_session()
        # –û—Ç–º–µ–Ω—è–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
        if 'scheduler_task' in locals():
            scheduler_task.cancel()

if __name__ == "__main__":
    asyncio.run(main())
