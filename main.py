import asyncio
import json
import logging
import os
import random
from datetime import datetime, time
from typing import Dict, List, Optional

import aiohttp
import pytz
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import (
    Application, CallbackQueryHandler, CommandHandler, ContextTypes,
    MessageHandler, filters
)

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
WORDS_API_KEY = os.getenv('WORDS_API_KEY')  # RapidAPI –∫–ª—é—á –¥–ª—è WordsAPI
TRANSLATE_API_KEY = os.getenv('TRANSLATE_API_KEY')  # Yandex Translate API –∫–ª—é—á

# –•—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –ø–∞–º—è—Ç–∏
user_data: Dict[int, Dict] = {}

class EnglishLearningBot:
    def __init__(self):
        self.moscow_tz = pytz.timezone('Europe/Moscow')
        
    def get_user_data(self, user_id: int) -> Dict:
        """–ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if user_id not in user_data:
            user_data[user_id] = {
                'level': None,
                'learned_words': set(),
                'daily_words': [],
                'last_daily_update': None
            }
        return user_data[user_id]
    
    async def fetch_words_by_level(self, level: str, count: int = 10) -> List[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª–æ–≤ —Å WordsAPI –ø–æ —É—Ä–æ–≤–Ω—é —Å–ª–æ–∂–Ω–æ—Å—Ç–∏"""
        try:
            headers = {
                'X-RapidAPI-Key': WORDS_API_KEY,
                'X-RapidAPI-Host': 'wordsapiv1.p.rapidapi.com'
            }
            
            # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞ —Å–ª–æ–≤ –ø–æ —É—Ä–æ–≤–Ω—è–º
            level_params = {
                'A1': {'frequencyMin': 7, 'frequencyMax': 7, 'letterPattern': '[a-z]{3,6}'},
                'A2': {'frequencyMin': 6, 'frequencyMax': 7, 'letterPattern': '[a-z]{4,7}'},
                'B1': {'frequencyMin': 5, 'frequencyMax': 6, 'letterPattern': '[a-z]{5,8}'},
                'B2': {'frequencyMin': 4, 'frequencyMax': 5, 'letterPattern': '[a-z]{6,9}'},
                'C1': {'frequencyMin': 3, 'frequencyMax': 4, 'letterPattern': '[a-z]{7,10}'},
                'C2': {'frequencyMin': 1, 'frequencyMax': 3, 'letterPattern': '[a-z]{8,12}'}
            }
            
            words = []
            params = level_params.get(level, level_params['A1'])
            
            async with aiohttp.ClientSession() as session:
                # –ü–æ–ª—É—á–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ —Å–ª–æ–≤–∞
                for _ in range(count * 2):  # –ë–µ—Ä–µ–º –±–æ–ª—å—à–µ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
                    try:
                        url = "https://wordsapiv1.p.rapidapi.com/words/"
                        async with session.get(
                            url,
                            headers=headers,
                            params={
                                'random': 'true',
                                'frequencyMin': params['frequencyMin'],
                                'frequencyMax': params['frequencyMax']
                            }
                        ) as response:
                            if response.status == 200:
                                data = await response.json()
                                word = data.get('word', '').lower()
                                
                                if word and len(word) >= 3:
                                    # –ü–æ–ª—É—á–∞–µ–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–ª–æ–≤–∞
                                    definition = await self.get_word_definition(word, session, headers)
                                    if definition:
                                        words.append({
                                            'word': word,
                                            'definition': definition
                                        })
                                        
                                        if len(words) >= count:
                                            break
                                            
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ª–æ–≤–∞: {e}")
                        continue
                        
            return words[:count] if words else await self.get_fallback_words(level, count)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ API —Å–ª–æ–≤: {e}")
            return await self.get_fallback_words(level, count)
    
    async def get_word_definition(self, word: str, session: aiohttp.ClientSession, headers: Dict) -> Optional[str]:
        """–ü–æ–ª—É—á–∏—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–ª–æ–≤–∞"""
        try:
            url = f"https://wordsapiv1.p.rapidapi.com/words/{word}/definitions"
            async with session.get(url, headers=headers) as response:
                if response.status == 200:
                    data = await response.json()
                    definitions = data.get('definitions', [])
                    if definitions:
                        return definitions[0].get('definition', '')
        except:
            pass
        return None
    
    async def get_fallback_words(self, level: str, count: int) -> List[Dict]:
        """–†–µ–∑–µ—Ä–≤–Ω—ã–µ —Å–ª–æ–≤–∞ –µ—Å–ª–∏ API –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ"""
        fallback_words = {
            'A1': [
                {'word': 'cat', 'definition': 'a small domesticated carnivorous mammal'},
                {'word': 'dog', 'definition': 'a domesticated carnivorous mammal'},
                {'word': 'house', 'definition': 'a building for human habitation'},
                {'word': 'car', 'definition': 'a road vehicle powered by a motor'},
                {'word': 'book', 'definition': 'a written or printed work consisting of pages'},
                {'word': 'water', 'definition': 'a colorless, transparent, odorless liquid'},
                {'word': 'food', 'definition': 'any nutritious substance that people eat'},
                {'word': 'table', 'definition': 'a piece of furniture with a flat top'},
                {'word': 'chair', 'definition': 'a separate seat for one person'},
                {'word': 'window', 'definition': 'an opening in a wall fitted with glass'}
            ],
            'A2': [
                {'word': 'beautiful', 'definition': 'pleasing the senses or mind aesthetically'},
                {'word': 'important', 'definition': 'of great significance or value'},
                {'word': 'different', 'definition': 'not the same as another'},
                {'word': 'interesting', 'definition': 'arousing curiosity or interest'},
                {'word': 'difficult', 'definition': 'needing much effort to accomplish'},
                {'word': 'comfortable', 'definition': 'providing physical ease and relaxation'},
                {'word': 'expensive', 'definition': 'costing a lot of money'},
                {'word': 'dangerous', 'definition': 'able or likely to cause harm'},
                {'word': 'wonderful', 'definition': 'inspiring delight, pleasure, or admiration'},
                {'word': 'terrible', 'definition': 'extremely bad or serious'}
            ]
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–ª–æ–≤–∞ –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —É—Ä–æ–≤–Ω–µ–π
        fallback_words['B1'] = fallback_words['A2']  # –£–ø—Ä–æ—â–µ–Ω–Ω–æ
        fallback_words['B2'] = fallback_words['A2']
        fallback_words['C1'] = fallback_words['A2']
        fallback_words['C2'] = fallback_words['A2']
        
        words = fallback_words.get(level, fallback_words['A1'])
        return random.sample(words, min(count, len(words)))
    
    async def translate_text(self, text: str, target_lang: str = 'ru') -> str:
        """–ü–µ—Ä–µ–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞ —á–µ—Ä–µ–∑ Yandex Translate API"""
        try:
            url = "https://translate.yandex.net/api/v1.5/tr.json/translate"
            params = {
                'key': TRANSLATE_API_KEY,
                'text': text,
                'lang': f'en-{target_lang}' if target_lang == 'ru' else f'ru-en'
            }
            
            async with aiohttp.ClientSession() as session:
                async with session.post(url, params=params) as response:
                    if response.status == 200:
                        data = await response.json()
                        return data['text'][0]
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞: {e}")
        
        # –ü—Ä–æ—Å—Ç–æ–π —Ä–µ–∑–µ—Ä–≤–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
        simple_translations = {
            'hello': '–ø—Ä–∏–≤–µ—Ç', 'cat': '–∫–æ—Ç', 'dog': '—Å–æ–±–∞–∫–∞', 'house': '–¥–æ–º',
            'car': '–º–∞—à–∏–Ω–∞', 'book': '–∫–Ω–∏–≥–∞', 'water': '–≤–æ–¥–∞', 'food': '–µ–¥–∞',
            '–ø—Ä–∏–≤–µ—Ç': 'hello', '–∫–æ—Ç': 'cat', '—Å–æ–±–∞–∫–∞': 'dog', '–¥–æ–º': 'house'
        }
        return simple_translations.get(text.lower(), f"–ü–µ—Ä–µ–≤–æ–¥ –¥–ª—è '{text}' –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = EnglishLearningBot()

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /start"""
    keyboard = [
        [InlineKeyboardButton("A1 (Beginner)", callback_data="level_A1")],
        [InlineKeyboardButton("A2 (Elementary)", callback_data="level_A2")],
        [InlineKeyboardButton("B1 (Intermediate)", callback_data="level_B1")],
        [InlineKeyboardButton("B2 (Upper-Intermediate)", callback_data="level_B2")],
        [InlineKeyboardButton("C1 (Advanced)", callback_data="level_C1")],
        [InlineKeyboardButton("C2 (Proficiency)", callback_data="level_C2")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    welcome_text = """üéì –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ English Learning Bot!

–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à —É—Ä–æ–≤–µ–Ω—å –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —è–∑—ã–∫–∞:

‚Ä¢ A1-A2: –ù–∞—á–∏–Ω–∞—é—â–∏–π
‚Ä¢ B1-B2: –°—Ä–µ–¥–Ω–∏–π  
‚Ä¢ C1-C2: –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π

–ë–æ—Ç –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –≤–∞–º —Å–ª–æ–≤–∞ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 10:00 –ø–æ –º–æ—Å–∫–æ–≤—Å–∫–æ–º—É –≤—Ä–µ–º–µ–Ω–∏!

üìö –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É
/translate - –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ —Å–ª–æ–≤–æ
/more - –ø–æ–ª—É—á–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–ª–æ–≤–∞
/level - –∏–∑–º–µ–Ω–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å"""

    await update.message.reply_text(welcome_text, reply_markup=reply_markup)

async def handle_level_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —É—Ä–æ–≤–Ω—è"""
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    level = query.data.replace("level_", "")
    
    user_info = bot.get_user_data(user_id)
    user_info['level'] = level
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–≤—ã–µ —Å–ª–æ–≤–∞
    words = await bot.fetch_words_by_level(level, 5)
    user_info['daily_words'] = words
    user_info['last_daily_update'] = datetime.now(bot.moscow_tz).date()
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    keyboard = [
        [InlineKeyboardButton("üîÑ –ü–æ–ª—É—á–∏—Ç—å –µ—â–µ —Å–ª–æ–≤–∞", callback_data="more_words")],
        [InlineKeyboardButton("üí¨ –ü–µ—Ä–µ–≤–µ—Å—Ç–∏ —Å–ª–æ–≤–æ", callback_data="translate_mode")],
        [InlineKeyboardButton("üìä –ò–∑–º–µ–Ω–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å", callback_data="change_level")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    words_text = f"‚úÖ –£—Ä–æ–≤–µ–Ω—å {level} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!\n\nüìö –í–∞—à–∏ —Å–ª–æ–≤–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:\n\n"
    for i, word_info in enumerate(words, 1):
        words_text += f"{i}. **{word_info['word']}** - {word_info['definition']}\n\n"
    
    await query.edit_message_text(words_text, parse_mode='Markdown', reply_markup=reply_markup)

async def handle_more_words(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–ª—É—á–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–ª–æ–≤–∞"""
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    user_info = bot.get_user_data(user_id)
    
    if not user_info['level']:
        await query.edit_message_text("‚ùå –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å –∫–æ–º–∞–Ω–¥–æ–π /start")
        return
    
    # –û—Ç–º–µ—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Å–ª–æ–≤–∞ –∫–∞–∫ –∏–∑—É—á–µ–Ω–Ω—ã–µ
    for word_info in user_info['daily_words']:
        user_info['learned_words'].add(word_info['word'])
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–æ–≤—ã–µ —Å–ª–æ–≤–∞
    new_words = await bot.fetch_words_by_level(user_info['level'], 5)
    # –§–∏–ª—å—Ç—Ä—É–µ–º —É–∂–µ –∏–∑—É—á–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞
    new_words = [w for w in new_words if w['word'] not in user_info['learned_words']]
    
    if not new_words:
        new_words = await bot.fetch_words_by_level(user_info['level'], 5)
    
    user_info['daily_words'] = new_words
    
    keyboard = [
        [InlineKeyboardButton("üîÑ –ü–æ–ª—É—á–∏—Ç—å –µ—â–µ —Å–ª–æ–≤–∞", callback_data="more_words")],
        [InlineKeyboardButton("üí¨ –ü–µ—Ä–µ–≤–µ—Å—Ç–∏ —Å–ª–æ–≤–æ", callback_data="translate_mode")],
        [InlineKeyboardButton("üìä –ò–∑–º–µ–Ω–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å", callback_data="change_level")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    words_text = f"üÜï –ù–æ–≤—ã–µ —Å–ª–æ–≤–∞ ({user_info['level']}):\n\n"
    for i, word_info in enumerate(new_words, 1):
        words_text += f"{i}. **{word_info['word']}** - {word_info['definition']}\n\n"
    
    words_text += f"üìà –ò–∑—É—á–µ–Ω–æ —Å–ª–æ–≤: {len(user_info['learned_words'])}"
    
    await query.edit_message_text(words_text, parse_mode='Markdown', reply_markup=reply_markup)

async def handle_translate_mode(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–†–µ–∂–∏–º –ø–µ—Ä–µ–≤–æ–¥–∞"""
    query = update.callback_query
    await query.answer()
    
    keyboard = [
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ —Å–ª–æ–≤–∞–º", callback_data="back_to_words")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        "üí¨ –†–µ–∂–∏–º –ø–µ—Ä–µ–≤–æ–¥–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!\n\n"
        "–ù–∞–ø–∏—à–∏—Ç–µ —Å–ª–æ–≤–æ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º –∏–ª–∏ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ, –∏ —è –ø–µ—Ä–µ–≤–µ–¥—É –µ–≥–æ.\n\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: cat –∏–ª–∏ –∫–æ—Ç",
        reply_markup=reply_markup
    )

async def handle_back_to_words(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ª–æ–≤–∞–º"""
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    user_info = bot.get_user_data(user_id)
    
    if not user_info['daily_words']:
        await query.edit_message_text("‚ùå –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å –∫–æ–º–∞–Ω–¥–æ–π /start")
        return
    
    keyboard = [
        [InlineKeyboardButton("üîÑ –ü–æ–ª—É—á–∏—Ç—å –µ—â–µ —Å–ª–æ–≤–∞", callback_data="more_words")],
        [InlineKeyboardButton("üí¨ –ü–µ—Ä–µ–≤–µ—Å—Ç–∏ —Å–ª–æ–≤–æ", callback_data="translate_mode")],
        [InlineKeyboardButton("üìä –ò–∑–º–µ–Ω–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å", callback_data="change_level")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    words_text = f"üìö –í–∞—à–∏ —Ç–µ–∫—É—â–∏–µ —Å–ª–æ–≤–∞ ({user_info['level']}):\n\n"
    for i, word_info in enumerate(user_info['daily_words'], 1):
        words_text += f"{i}. **{word_info['word']}** - {word_info['definition']}\n\n"
    
    await query.edit_message_text(words_text, parse_mode='Markdown', reply_markup=reply_markup)

async def handle_change_level(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ò–∑–º–µ–Ω–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å"""
    query = update.callback_query
    await query.answer()
    
    keyboard = [
        [InlineKeyboardButton("A1 (Beginner)", callback_data="level_A1")],
        [InlineKeyboardButton("A2 (Elementary)", callback_data="level_A2")],
        [InlineKeyboardButton("B1 (Intermediate)", callback_data="level_B1")],
        [InlineKeyboardButton("B2 (Upper-Intermediate)", callback_data="level_B2")],
        [InlineKeyboardButton("C1 (Advanced)", callback_data="level_C1")],
        [InlineKeyboardButton("C2 (Proficiency)", callback_data="level_C2")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        "üìä –í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —è–∑—ã–∫–∞:",
        reply_markup=reply_markup
    )

async def handle_text_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞)"""
    text = update.message.text
    user_id = update.message.from_user.id
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —è–∑—ã–∫ –∏ –ø–µ—Ä–µ–≤–æ–¥–∏–º
    if any(ord(char) > 127 for char in text):  # –°–æ–¥–µ—Ä–∂–∏—Ç –∫–∏—Ä–∏–ª–ª–∏—Ü—É
        translation = await bot.translate_text(text, 'en')
        await update.message.reply_text(f"üîÑ **{text}** ‚Üí {translation}", parse_mode='Markdown')
    else:  # –ê–Ω–≥–ª–∏–π—Å–∫–∏–π —Ç–µ–∫—Å—Ç
        translation = await bot.translate_text(text, 'ru')
        await update.message.reply_text(f"üîÑ **{text}** ‚Üí {translation}", parse_mode='Markdown')

async def translate_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /translate"""
    await update.message.reply_text(
        "üí¨ –ù–∞–ø–∏—à–∏—Ç–µ —Å–ª–æ–≤–æ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º –∏–ª–∏ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞.\n\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: cat –∏–ª–∏ –∫–æ—Ç"
    )

async def more_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /more"""
    user_id = update.message.from_user.id
    user_info = bot.get_user_data(user_id)
    
    if not user_info['level']:
        await update.message.reply_text("‚ùå –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å –∫–æ–º–∞–Ω–¥–æ–π /start")
        return
    
    # –û—Ç–º–µ—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Å–ª–æ–≤–∞ –∫–∞–∫ –∏–∑—É—á–µ–Ω–Ω—ã–µ
    for word_info in user_info['daily_words']:
        user_info['learned_words'].add(word_info['word'])
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–æ–≤—ã–µ —Å–ª–æ–≤–∞
    new_words = await bot.fetch_words_by_level(user_info['level'], 5)
    user_info['daily_words'] = new_words
    
    words_text = f"üÜï –ù–æ–≤—ã–µ —Å–ª–æ–≤–∞ ({user_info['level']}):\n\n"
    for i, word_info in enumerate(new_words, 1):
        words_text += f"{i}. **{word_info['word']}** - {word_info['definition']}\n\n"
    
    words_text += f"üìà –ò–∑—É—á–µ–Ω–æ —Å–ª–æ–≤: {len(user_info['learned_words'])}"
    
    await update.message.reply_text(words_text, parse_mode='Markdown')

async def level_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /level"""
    keyboard = [
        [InlineKeyboardButton("A1 (Beginner)", callback_data="level_A1")],
        [InlineKeyboardButton("A2 (Elementary)", callback_data="level_A2")],
        [InlineKeyboardButton("B1 (Intermediate)", callback_data="level_B1")],
        [InlineKeyboardButton("B2 (Upper-Intermediate)", callback_data="level_B2")],
        [InlineKeyboardButton("C1 (Advanced)", callback_data="level_C1")],
        [InlineKeyboardButton("C2 (Proficiency)", callback_data="level_C2")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        "üìä –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à —É—Ä–æ–≤–µ–Ω—å –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —è–∑—ã–∫–∞:",
        reply_markup=reply_markup
    )

async def daily_words_job(context: ContextTypes.DEFAULT_TYPE):
    """–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–ª–æ–≤ –≤ 10:00 –ø–æ –ú–æ—Å–∫–≤–µ"""
    try:
        for user_id, user_info in user_data.items():
            if user_info['level'] and user_info.get('daily_words'):
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å —Å–ª–æ–≤–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
                today = datetime.now(bot.moscow_tz).date()
                if user_info['last_daily_update'] != today:
                    # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–æ–≤—ã–µ —Å–ª–æ–≤–∞
                    new_words = await bot.fetch_words_by_level(user_info['level'], 5)
                    user_info['daily_words'] = new_words
                    user_info['last_daily_update'] = today
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                words_text = f"üåÖ –î–æ–±—Ä–æ–µ —É—Ç—Ä–æ! –í–∞—à–∏ —Å–ª–æ–≤–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è ({user_info['level']}):\n\n"
                for i, word_info in enumerate(user_info['daily_words'], 1):
                    words_text += f"{i}. **{word_info['word']}** - {word_info['definition']}\n\n"
                
                words_text += "–£–¥–∞—á–Ω–æ–≥–æ –∏–∑—É—á–µ–Ω–∏—è! üìö"
                
                try:
                    await context.bot.send_message(
                        chat_id=user_id,
                        text=words_text,
                        parse_mode='Markdown'
                    )
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
                    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –∑–∞–¥–∞—á–µ: {e}")

def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    if not TOKEN:
        logger.error("TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
        return
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    application = Application.builder().token(TOKEN).build()
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("translate", translate_command))
    application.add_handler(CommandHandler("more", more_command))
    application.add_handler(CommandHandler("level", level_command))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback-–∫–Ω–æ–ø–æ–∫
    application.add_handler(CallbackQueryHandler(handle_level_selection, pattern="^level_"))
    application.add_handler(CallbackQueryHandler(handle_more_words, pattern="^more_words$"))
    application.add_handler(CallbackQueryHandler(handle_translate_mode, pattern="^translate_mode$"))
    application.add_handler(CallbackQueryHandler(handle_back_to_words, pattern="^back_to_words$"))
    application.add_handler(CallbackQueryHandler(handle_change_level, pattern="^change_level$"))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text_message))
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –∑–∞–¥–∞—á–∏ (10:00 –ø–æ –ú–æ—Å–∫–≤–µ)
    job_queue = application.job_queue
    job_queue.run_daily(
        daily_words_job,
        time=time(hour=7, minute=0),  # 10:00 –ú–°–ö = 07:00 UTC
        days=(0, 1, 2, 3, 4, 5, 6)   # –ö–∞–∂–¥—ã–π –¥–µ–Ω—å
    )
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    application.run_polling()

if __name__ == '__main__':
    main()
